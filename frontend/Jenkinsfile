pipeline {
    agent any
    environment {
        ECR_REGISTRY = "571600829776.dkr.ecr.ap-south-1.amazonaws.com"  
        AWS_CREDENTIALS_ID = 'aws-credentials'
        APP_REPO_NAME = "team-c/frontend"  
        TAG = "${env.BUILD_NUMBER}"  // Fazladan `=` işareti vardı, düzelttim.
        PATH = "/usr/local/bin/:${env.PATH}"
        AWS_REGION = "ap-south-1"  
        CLUSTER_NAME = "team-c-eks-cluster"  // Bu değişken eksikti, tanımladım.
    }

    stages {
        stage('Checkout') {
            steps {
                echo "Checking out repo"
                git branch: 'main', credentialsId: '52bedc29-61ca-455c-af31-090c8108c6a7', url: 'https://github.com/sumeyyeakkas/academy2024-team-C'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    sh '''
                    pwd
                    cd frontend
                    pwd
                    ls
                    docker build --force-rm -t "$ECR_REGISTRY/$APP_REPO_NAME:$TAG" .
                    docker image ls
                    '''
                }
            }
        }

        stage('Push Image to ECR Repo') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${AWS_CREDENTIALS_ID}"]]) {
                        def imageTag = "${ECR_REGISTRY}/${APP_REPO_NAME}:$TAG"
                        sh '''
                        aws ecr get-login-password --region "${AWS_REGION}" | docker login --username AWS --password-stdin "${ECR_REGISTRY}"
                        docker push ''' + imageTag + '''
                        '''
                    }
                }
            }
        }
         stage('Update Deployment YAML') {
            steps {
                script {
                    def imageTag = "${ECR_REGISTRY}/${APP_REPO_NAME}:$TAG"
                    
                    sh '''
                    
                    cd frontend/deployment
                    pwd
                    ls
                    sed -i 's#image: .*#image: ''' + imageTag + '''#' deployment.yml
                    cat deployment.yml 
                    '''
                }
            }
        }
        stage('Deploy to EKS') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${AWS_CREDENTIALS_ID}"]]) {
                        sh """
                        aws eks --region "${AWS_REGION}" update-kubeconfig --name "${CLUSTER_NAME}"

                        pwd
                        ls
                        cd frontend/deployment
                        pwd 
                        ls
                        cat deployment.yml 
                        kubectl apply -f deployment.yml
                        kubectl apply -f service.yml
                        kubectl apply -f ingress.yml
                        """
                    }
                }
            }
        }
        
    }

    post {
        always {
            echo 'Deleting all local images'  
            sh 'docker image prune -af'
        }
    }
}
